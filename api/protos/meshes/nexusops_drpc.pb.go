// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: nexusops.proto

package meshes

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_nexusops_proto struct{}

func (drpcEncoding_File_nexusops_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_nexusops_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_nexusops_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_nexusops_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_nexusops_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCNexusServiceClient interface {
	DRPCConn() drpc.Conn

	Hello(ctx context.Context, in *HelloRequest) (*HelloResponse, error)
	NexusName(ctx context.Context, in *NexusNameRequest) (*NexusNameResponse, error)
	StreamCloudEvents(ctx context.Context, in *CloudEventsRequest) (DRPCNexusService_StreamCloudEventsClient, error)
}

type drpcNexusServiceClient struct {
	cc drpc.Conn
}

func NewDRPCNexusServiceClient(cc drpc.Conn) DRPCNexusServiceClient {
	return &drpcNexusServiceClient{cc}
}

func (c *drpcNexusServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNexusServiceClient) Hello(ctx context.Context, in *HelloRequest) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/meshes.NexusService/Hello", drpcEncoding_File_nexusops_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNexusServiceClient) NexusName(ctx context.Context, in *NexusNameRequest) (*NexusNameResponse, error) {
	out := new(NexusNameResponse)
	err := c.cc.Invoke(ctx, "/meshes.NexusService/NexusName", drpcEncoding_File_nexusops_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcNexusServiceClient) StreamCloudEvents(ctx context.Context, in *CloudEventsRequest) (DRPCNexusService_StreamCloudEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, "/meshes.NexusService/StreamCloudEvents", drpcEncoding_File_nexusops_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcNexusService_StreamCloudEventsClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_nexusops_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCNexusService_StreamCloudEventsClient interface {
	drpc.Stream
	Recv() (*CloudEventsResponse, error)
}

type drpcNexusService_StreamCloudEventsClient struct {
	drpc.Stream
}

func (x *drpcNexusService_StreamCloudEventsClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcNexusService_StreamCloudEventsClient) Recv() (*CloudEventsResponse, error) {
	m := new(CloudEventsResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_nexusops_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcNexusService_StreamCloudEventsClient) RecvMsg(m *CloudEventsResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_nexusops_proto{})
}

type DRPCNexusServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	NexusName(context.Context, *NexusNameRequest) (*NexusNameResponse, error)
	StreamCloudEvents(*CloudEventsRequest, DRPCNexusService_StreamCloudEventsStream) error
}

type DRPCNexusServiceUnimplementedServer struct{}

func (s *DRPCNexusServiceUnimplementedServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCNexusServiceUnimplementedServer) NexusName(context.Context, *NexusNameRequest) (*NexusNameResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCNexusServiceUnimplementedServer) StreamCloudEvents(*CloudEventsRequest, DRPCNexusService_StreamCloudEventsStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCNexusServiceDescription struct{}

func (DRPCNexusServiceDescription) NumMethods() int { return 3 }

func (DRPCNexusServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/meshes.NexusService/Hello", drpcEncoding_File_nexusops_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNexusServiceServer).
					Hello(
						ctx,
						in1.(*HelloRequest),
					)
			}, DRPCNexusServiceServer.Hello, true
	case 1:
		return "/meshes.NexusService/NexusName", drpcEncoding_File_nexusops_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNexusServiceServer).
					NexusName(
						ctx,
						in1.(*NexusNameRequest),
					)
			}, DRPCNexusServiceServer.NexusName, true
	case 2:
		return "/meshes.NexusService/StreamCloudEvents", drpcEncoding_File_nexusops_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCNexusServiceServer).
					StreamCloudEvents(
						in1.(*CloudEventsRequest),
						&drpcNexusService_StreamCloudEventsStream{in2.(drpc.Stream)},
					)
			}, DRPCNexusServiceServer.StreamCloudEvents, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterNexusService(mux drpc.Mux, impl DRPCNexusServiceServer) error {
	return mux.Register(impl, DRPCNexusServiceDescription{})
}

type DRPCNexusService_HelloStream interface {
	drpc.Stream
	SendAndClose(*HelloResponse) error
}

type drpcNexusService_HelloStream struct {
	drpc.Stream
}

func (x *drpcNexusService_HelloStream) SendAndClose(m *HelloResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_nexusops_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNexusService_NexusNameStream interface {
	drpc.Stream
	SendAndClose(*NexusNameResponse) error
}

type drpcNexusService_NexusNameStream struct {
	drpc.Stream
}

func (x *drpcNexusService_NexusNameStream) SendAndClose(m *NexusNameResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_nexusops_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCNexusService_StreamCloudEventsStream interface {
	drpc.Stream
	Send(*CloudEventsResponse) error
}

type drpcNexusService_StreamCloudEventsStream struct {
	drpc.Stream
}

func (x *drpcNexusService_StreamCloudEventsStream) Send(m *CloudEventsResponse) error {
	return x.MsgSend(m, drpcEncoding_File_nexusops_proto{})
}
