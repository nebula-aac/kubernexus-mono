// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: nexusops.proto

package meshes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NexusService_Hello_FullMethodName             = "/meshes.NexusService/Hello"
	NexusService_NexusName_FullMethodName         = "/meshes.NexusService/NexusName"
	NexusService_StreamCloudEvents_FullMethodName = "/meshes.NexusService/StreamCloudEvents"
)

// NexusServiceClient is the client API for NexusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	NexusName(ctx context.Context, in *NexusNameRequest, opts ...grpc.CallOption) (*NexusNameResponse, error)
	StreamCloudEvents(ctx context.Context, in *CloudEventsRequest, opts ...grpc.CallOption) (NexusService_StreamCloudEventsClient, error)
}

type nexusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusServiceClient(cc grpc.ClientConnInterface) NexusServiceClient {
	return &nexusServiceClient{cc}
}

func (c *nexusServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, NexusService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) NexusName(ctx context.Context, in *NexusNameRequest, opts ...grpc.CallOption) (*NexusNameResponse, error) {
	out := new(NexusNameResponse)
	err := c.cc.Invoke(ctx, NexusService_NexusName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) StreamCloudEvents(ctx context.Context, in *CloudEventsRequest, opts ...grpc.CallOption) (NexusService_StreamCloudEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NexusService_ServiceDesc.Streams[0], NexusService_StreamCloudEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nexusServiceStreamCloudEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NexusService_StreamCloudEventsClient interface {
	Recv() (*CloudEventsResponse, error)
	grpc.ClientStream
}

type nexusServiceStreamCloudEventsClient struct {
	grpc.ClientStream
}

func (x *nexusServiceStreamCloudEventsClient) Recv() (*CloudEventsResponse, error) {
	m := new(CloudEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NexusServiceServer is the server API for NexusService service.
// All implementations must embed UnimplementedNexusServiceServer
// for forward compatibility
type NexusServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	NexusName(context.Context, *NexusNameRequest) (*NexusNameResponse, error)
	StreamCloudEvents(*CloudEventsRequest, NexusService_StreamCloudEventsServer) error
	mustEmbedUnimplementedNexusServiceServer()
}

// UnimplementedNexusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNexusServiceServer struct {
}

func (UnimplementedNexusServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedNexusServiceServer) NexusName(context.Context, *NexusNameRequest) (*NexusNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NexusName not implemented")
}
func (UnimplementedNexusServiceServer) StreamCloudEvents(*CloudEventsRequest, NexusService_StreamCloudEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCloudEvents not implemented")
}
func (UnimplementedNexusServiceServer) mustEmbedUnimplementedNexusServiceServer() {}

// UnsafeNexusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServiceServer will
// result in compilation errors.
type UnsafeNexusServiceServer interface {
	mustEmbedUnimplementedNexusServiceServer()
}

func RegisterNexusServiceServer(s grpc.ServiceRegistrar, srv NexusServiceServer) {
	s.RegisterService(&NexusService_ServiceDesc, srv)
}

func _NexusService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_NexusName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NexusNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).NexusName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_NexusName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).NexusName(ctx, req.(*NexusNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_StreamCloudEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexusServiceServer).StreamCloudEvents(m, &nexusServiceStreamCloudEventsServer{stream})
}

type NexusService_StreamCloudEventsServer interface {
	Send(*CloudEventsResponse) error
	grpc.ServerStream
}

type nexusServiceStreamCloudEventsServer struct {
	grpc.ServerStream
}

func (x *nexusServiceStreamCloudEventsServer) Send(m *CloudEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NexusService_ServiceDesc is the grpc.ServiceDesc for NexusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshes.NexusService",
	HandlerType: (*NexusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _NexusService_Hello_Handler,
		},
		{
			MethodName: "NexusName",
			Handler:    _NexusService_NexusName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCloudEvents",
			Handler:       _NexusService_StreamCloudEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nexusops.proto",
}
